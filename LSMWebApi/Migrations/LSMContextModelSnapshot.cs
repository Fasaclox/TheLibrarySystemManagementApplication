// <auto-generated />
using System;
using LSMWebApi.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LSMWebApi.Migrations
{
    [DbContext(typeof(LSMContext))]
    partial class LSMContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LSMWebApi.Data.Binding", b =>
                {
                    b.Property<int>("Binding_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Binding_Name")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Date_Created")
                        .HasColumnType("DateTime");

                    b.Property<DateTime?>("Date_Deleted")
                        .HasColumnType("DateTime");

                    b.Property<DateTime?>("Date_Edited")
                        .HasColumnType("DateTime");

                    b.HasKey("Binding_Id");

                    b.ToTable("Bindings");
                });

            modelBuilder.Entity("LSMWebApi.Data.Book", b =>
                {
                    b.Property<int>("BookISBN_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .HasColumnType("varchar(250)");

                    b.Property<int>("Binding_Id")
                        .HasColumnType("int");

                    b.Property<int?>("Binding_Id1")
                        .HasColumnType("int");

                    b.Property<int>("Category_Id")
                        .HasColumnType("int");

                    b.Property<int?>("Category_Id1")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date_Created")
                        .HasColumnType("DateTime");

                    b.Property<DateTime?>("Date_Deleted")
                        .HasColumnType("DateTime");

                    b.Property<DateTime?>("Date_Edited")
                        .HasColumnType("DateTime");

                    b.Property<int>("Edition")
                        .HasColumnType("int");

                    b.Property<string>("Language")
                        .HasColumnType("varchar(250)");

                    b.Property<int>("Number_Actual_Copies")
                        .HasColumnType("int");

                    b.Property<int>("Number_Current_Copies")
                        .HasColumnType("int");

                    b.Property<int>("Shelf_Id")
                        .HasColumnType("int");

                    b.Property<int?>("Shelf_Id1")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("Year_Published")
                        .HasColumnType("DateTime");

                    b.HasKey("BookISBN_Id");

                    b.HasIndex("Binding_Id1");

                    b.HasIndex("Category_Id1");

                    b.HasIndex("Shelf_Id1");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("LSMWebApi.Data.Borrower", b =>
                {
                    b.Property<int>("Borrower_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookISBN_Id")
                        .HasColumnType("int");

                    b.Property<int?>("BookISBN_Id1")
                        .HasColumnType("int");

                    b.Property<int>("Count_Book_Borrowed")
                        .HasColumnType("int");

                    b.Property<int>("Customer_Id")
                        .HasColumnType("int");

                    b.Property<int?>("Customer_Id1")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date_Borrowed")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("Date_Created")
                        .HasColumnType("DateTime");

                    b.Property<DateTime?>("Date_Deleted")
                        .HasColumnType("DateTime");

                    b.Property<DateTime?>("Date_Edited")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("Date_Expected_Return")
                        .HasColumnType("DateTime");

                    b.Property<bool>("Is_Borrowed")
                        .HasColumnType("bit");

                    b.Property<int>("Staff_Id")
                        .HasColumnType("int");

                    b.Property<int?>("Staff_Id1")
                        .HasColumnType("int");

                    b.HasKey("Borrower_Id");

                    b.HasIndex("BookISBN_Id1");

                    b.HasIndex("Customer_Id1");

                    b.HasIndex("Staff_Id1");

                    b.ToTable("Borrowers");
                });

            modelBuilder.Entity("LSMWebApi.Data.Category", b =>
                {
                    b.Property<int>("Category_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category_Name")
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("Date_Created")
                        .HasColumnType("DateTime");

                    b.Property<DateTime?>("Date_Deleted")
                        .HasColumnType("DateTime");

                    b.Property<DateTime?>("Date_Edited")
                        .HasColumnType("DateTime");

                    b.HasKey("Category_Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("LSMWebApi.Data.Customer", b =>
                {
                    b.Property<int>("Customer_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType(" varchar(50)");

                    b.Property<DateTime>("Date_Created")
                        .HasColumnType("DateTime");

                    b.Property<DateTime?>("Date_Deleted")
                        .HasColumnType("DateTime");

                    b.Property<DateTime?>("Date_Edited")
                        .HasColumnType("DateTime");

                    b.Property<string>("Email")
                        .HasColumnType(" varchar(30)");

                    b.Property<string>("First_Name")
                        .HasColumnType(" varchar(30)");

                    b.Property<string>("Gender")
                        .HasColumnType(" varchar(10)");

                    b.Property<string>("Last_Name")
                        .HasColumnType(" varchar(30)");

                    b.Property<string>("Middle_Name")
                        .HasColumnType(" varchar(30)");

                    b.Property<string>("Occupation")
                        .HasColumnType(" varchar(30)");

                    b.Property<string>("Phone_Number")
                        .HasColumnType("varchar(15)");

                    b.Property<int>("Staff_Id")
                        .HasColumnType("int");

                    b.Property<int?>("Staff_Id1")
                        .HasColumnType("int");

                    b.HasKey("Customer_Id");

                    b.HasIndex("Staff_Id1");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("LSMWebApi.Data.Defaulter", b =>
                {
                    b.Property<int>("Defaulter_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date_Created")
                        .HasColumnType("DateTime");

                    b.Property<DateTime?>("Date_Deleted")
                        .HasColumnType("DateTime");

                    b.Property<DateTime?>("Date_Edited")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("Date_Paid")
                        .HasColumnType("DateTime");

                    b.Property<int>("Days_Defaulted")
                        .HasColumnType("int");

                    b.Property<bool>("Is_Paid")
                        .HasColumnType("bit");

                    b.Property<int>("Penalty_Cost")
                        .HasColumnType("int");

                    b.Property<int>("Return_Id")
                        .HasColumnType("int");

                    b.Property<int?>("Return_Id1")
                        .HasColumnType("int");

                    b.HasKey("Defaulter_Id");

                    b.HasIndex("Return_Id1");

                    b.ToTable("Defaulters");
                });

            modelBuilder.Entity("LSMWebApi.Data.Return", b =>
                {
                    b.Property<int>("Return_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Borrower_Id")
                        .HasColumnType("int");

                    b.Property<int?>("Borrower_Id1")
                        .HasColumnType("int");

                    b.Property<int>("Count_Book_Returned")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date_Actual_Return")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("Date_Borrowed")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("Date_Created")
                        .HasColumnType("DateTime");

                    b.Property<DateTime?>("Date_Deleted")
                        .HasColumnType("DateTime");

                    b.Property<DateTime?>("Date_Edited")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("Date_Expected_Return")
                        .HasColumnType("DateTime");

                    b.Property<bool>("Is_Defaulter")
                        .HasColumnType("bit");

                    b.Property<bool>("Is_Returned")
                        .HasColumnType("bit");

                    b.Property<int>("Staff_Id")
                        .HasColumnType("int");

                    b.Property<int?>("Staff_Id1")
                        .HasColumnType("int");

                    b.HasKey("Return_Id");

                    b.HasIndex("Borrower_Id1");

                    b.HasIndex("Staff_Id1");

                    b.ToTable("Returns");
                });

            modelBuilder.Entity("LSMWebApi.Data.Shelf", b =>
                {
                    b.Property<int>("Shelf_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date_Created")
                        .HasColumnType("DateTime");

                    b.Property<DateTime?>("Date_Deleted")
                        .HasColumnType("DateTime");

                    b.Property<DateTime?>("Date_Edited")
                        .HasColumnType("DateTime");

                    b.Property<int>("Floor_Number")
                        .HasColumnType("int");

                    b.Property<int>("Shelf_Number")
                        .HasColumnType("int");

                    b.HasKey("Shelf_Id");

                    b.ToTable("Shelves");
                });

            modelBuilder.Entity("LSMWebApi.Data.Staff", b =>
                {
                    b.Property<int>("Staff_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType(" varchar(50)");

                    b.Property<DateTime>("Date_Created")
                        .HasColumnType("DateTime");

                    b.Property<DateTime?>("Date_Deleted")
                        .HasColumnType("DateTime");

                    b.Property<DateTime?>("Date_Edited")
                        .HasColumnType("DateTime");

                    b.Property<string>("Designation")
                        .HasColumnType(" varchar(30)");

                    b.Property<string>("Email")
                        .HasColumnType(" varchar(30)");

                    b.Property<string>("First_Name")
                        .HasColumnType(" varchar(30)");

                    b.Property<string>("Gender")
                        .HasColumnType(" varchar(10)");

                    b.Property<bool>("Is_Admin")
                        .HasColumnType("bit");

                    b.Property<string>("Last_Name")
                        .HasColumnType(" varchar(30)");

                    b.Property<string>("Middle_Name")
                        .HasColumnType(" varchar(30)");

                    b.Property<string>("Phone_Number")
                        .HasColumnType("varchar(15)");

                    b.HasKey("Staff_Id");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("LSMWebApi.Model.LSMStaffUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("First_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LSMWebApi.Data.Book", b =>
                {
                    b.HasOne("LSMWebApi.Data.Binding", "Binding")
                        .WithMany()
                        .HasForeignKey("Binding_Id1");

                    b.HasOne("LSMWebApi.Data.Category", "Category")
                        .WithMany()
                        .HasForeignKey("Category_Id1");

                    b.HasOne("LSMWebApi.Data.Shelf", "Shelf")
                        .WithMany()
                        .HasForeignKey("Shelf_Id1");

                    b.Navigation("Binding");

                    b.Navigation("Category");

                    b.Navigation("Shelf");
                });

            modelBuilder.Entity("LSMWebApi.Data.Borrower", b =>
                {
                    b.HasOne("LSMWebApi.Data.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookISBN_Id1");

                    b.HasOne("LSMWebApi.Data.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("Customer_Id1");

                    b.HasOne("LSMWebApi.Data.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("Staff_Id1");

                    b.Navigation("Book");

                    b.Navigation("Customer");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("LSMWebApi.Data.Customer", b =>
                {
                    b.HasOne("LSMWebApi.Data.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("Staff_Id1");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("LSMWebApi.Data.Defaulter", b =>
                {
                    b.HasOne("LSMWebApi.Data.Return", "Return")
                        .WithMany()
                        .HasForeignKey("Return_Id1");

                    b.Navigation("Return");
                });

            modelBuilder.Entity("LSMWebApi.Data.Return", b =>
                {
                    b.HasOne("LSMWebApi.Data.Borrower", "Borrower")
                        .WithMany()
                        .HasForeignKey("Borrower_Id1");

                    b.HasOne("LSMWebApi.Data.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("Staff_Id1");

                    b.Navigation("Borrower");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LSMWebApi.Model.LSMStaffUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LSMWebApi.Model.LSMStaffUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LSMWebApi.Model.LSMStaffUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LSMWebApi.Model.LSMStaffUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
